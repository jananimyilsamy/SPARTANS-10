package datastructures;

import java.util.Scanner;

public class girdexistsornot {
	
	    public static boolean exist(char[][] board, String word) {
	        for(int i = 0; i < board.length; i++)
	            for(int j = 0; j < board[0].length; j++)
	                if(board[i][j] == word.charAt(0) && isFound(board, i, j, word, 0))
	                    return true;
	        
	        return false;
	    }
	    
	    private static boolean isFound(char[][] board, int i, int j, String word, int index) {
	        if(index == word.length()) return true;
	        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
	        if(word.charAt(index) != board[i][j]) return false;
	        char temp = board[i][j];
	        board[i][j] = '*';
	        if(isFound(board, i + 1, j, word, index + 1) ||
	            isFound(board, i - 1, j, word, index + 1) ||
	            isFound(board, i, j + 1, word, index + 1) ||
	            isFound(board, i, j - 1, word, index + 1))
	            return true;
	        board[i][j] = temp;
	        return false;
	    }
	

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String word=sc.next();
		System.out.print("ENTER MATRIX ROW AND COLUMN ");
		int n=sc.nextInt();
		int k=0;
		/*ABCESFCSADEE*/
		String a=sc.next();
		char a1[][]=new char[200][200];
		for (int i = 0; i < n; i++)  
        { 
            for (int j = 0; j < n; j++)  
            { 
                if(k < a.length()) 
                    a1[i][j] = a.charAt(k); 
                k++; 
            } 
        } 
		for (int i = 0; i < n; i++)  
        { 
            for (int j = 0; j < n; j++)  
            { 
            	System.out.println(a1[i][j]);
            }}
		
		System.out.print(exist(a1,word));
		
	}

}
